#!/usr/bin/env python3
"""
MASTER DSSAT DUERNAST2015 Analysis Workflow

Purpose: Complete end-to-end workflow for Duernast 2015 Spring Wheat N-Wheat model
         simulation and visualization generation.
"""

import subprocess
import sys
import os
import time
from pathlib import Path
from datetime import datetime

class DuernastWorkflowManager:
    """Main workflow manager for Duernast 2015 N-Wheat analysis"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.workflow_steps = []
        self.results = {}
        self.errors = []
        
    def log_step(self, step_name, status, details="", execution_time=0):
        """Log workflow step results"""
        step_info = {
            'step': step_name,
            'status': status,
            'details': details,
            'execution_time': execution_time,
            'timestamp': datetime.now().isoformat()
        }
        self.workflow_steps.append(step_info)
        
    def print_header(self, title, level=1):
        """Print formatted headers"""
        if level == 1:
            print(f"\n{'='*90}")
            print(f"{title.center(90)}")
            print('='*90)
        elif level == 2:
            print(f"\n{'-'*70}")
            print(f"{title}")
            print('-'*70)
        else:
            print(f"\n{title}")
            print('~' * len(title))
    
    def check_prerequisites(self):
        """Check all prerequisites for the workflow"""
        
        self.print_header("STEP 1: PREREQUISITES CHECK", 1)
        
        start_time = time.time()
        
        # Check if we're in the right directory and input folder exists
        if not Path('input').exists():
            error_msg = "Not in DUERNAST2015 directory or input folder missing! Please run from DUERNAST2015/"
            self.log_step("Prerequisites", "FAILED", error_msg)
            print(f"[ERROR] {error_msg}")
            print(f"Current directory: {os.getcwd()}")
            return False
        
        print(f"[OK] Working directory: {os.getcwd()}")
        print(f"[OK] Input folder exists: input/")
        
        # Ensure output directory exists
        output_dir = Path('output')
        if not output_dir.exists():
            print(f"[INFO] Creating output directory...")
            output_dir.mkdir(parents=True, exist_ok=True)
        
        # Check required input files and DSSAT output files
        required_files = {
            'input/TUDU1501.WHX': 'Experiment definition (N-Wheat model)',
            'input/TUDU1501.WTH': 'Weather data',
            'input/orignal data/TUDU1501.WHT': 'Observed field data (yield+grain+N)',
            'input/DE.SOL': 'Soil profile',
            'Genotype/WHAPS048.CUL': 'N-Wheat cultivar parameters',
            'output/Summary.OUT': 'Main simulation results',
            'output/PlantGro.OUT': 'Plant growth time series data',
            'output/Weather.OUT': 'Weather data processing results',
            'output/PlantN.OUT': 'Nitrogen dynamics data',
            'output/SoilNi.OUT': 'Soil nitrogen dynamics',
            'output/SoilWat.OUT': 'Soil water balance',
            'output/OVERVIEW.OUT': 'Comprehensive treatment overview'
        }
        
        print("\nChecking Required Files:")
        missing_files = []
        missing_outputs = []
        total_size = 0
        
        for filename, description in required_files.items():
            if Path(filename).exists():
                size = Path(filename).stat().st_size
                total_size += size
                print(f"  [OK] {filename:<45} ({size:>10,} bytes) - {description}")
            else:
                print(f"  [MISSING] {filename:<45} {'':>19} - {description}")
                if filename.startswith('output/'):
                    missing_outputs.append(filename)
                else:
                    missing_files.append(filename)
        
        # Check for missing input files (critical)
        if missing_files:
            error_msg = f"Missing required input files: {', '.join(missing_files)}"
            self.log_step("Prerequisites", "FAILED", error_msg)
            print(f"\n[ERROR] {error_msg}")
            print("Check that input files exist in input/ and Genotype/ folders")
            return False
        
        # Missing output files is expected (will be generated)
        if missing_outputs:
            print(f"\n[INFO] Output files will be generated by simulation")
            print(f"  Missing: {len(missing_outputs)} output files")
        else:
            print(f"\n[OK] All required files present ({total_size:,} bytes = {total_size/1024/1024:.1f} MB)")
        
        # Check Python dependencies
        print("\nChecking Python Dependencies:")
        required_packages = ['pandas', 'numpy', 'matplotlib', 'seaborn']
        
        for package in required_packages:
            try:
                __import__(package)
                print(f"  [OK] {package}")
            except ImportError:
                error_msg = f"Missing Python package: {package}"
                self.log_step("Prerequisites", "FAILED", error_msg)
                print(f"  [MISSING] {package}")
                print(f"\n[ERROR] {error_msg}")
                print(f"Install with: pip install {package}")
                return False
        
        # Check visualization script
        print("\nChecking Visualization Script:")
        vis_script = 'scripts/create_duernast_visualizations.py'
        if Path(vis_script).exists():
            print(f"  [OK] {vis_script}")
        else:
            print(f"  [WARNING] {vis_script} not found")
        
        execution_time = time.time() - start_time
        self.log_step("Prerequisites", "SUCCESS", "All prerequisites satisfied", execution_time)
        
        print(f"\n[SUCCESS] Prerequisites check completed! ({execution_time:.2f}s)")
        return True
    
    def run_dssat_simulation(self):
        """Run DSSAT N-Wheat simulation with outputs directed to output folder"""
        
        self.print_header("STEP 2: DSSAT N-WHEAT SIMULATION", 1)
        
        start_time = time.time()
        
        # Ensure output directory exists
        output_dir = Path('output')
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Copy necessary files to output directory
        # Executable and config files from main folder or DSSAT48
        main_files = ['DSCSM048.EXE', 'DSCSM048.CTR', 'DATA.CDE', 'DETAIL.CDE']
        # Input files from input folder
        input_files = ['TUDU1501.WHX', 'TUDU1501.WTH', 'TUDU1501.WHA', 'DE.SOL']
        
        print("Preparing simulation environment...")
        import shutil
        
        # Copy DSSAT executable and config files (check multiple locations)
        for filename in main_files:
            src = Path(filename)
            if not src.exists():
                # Try parent DSSAT48 folder
                src = Path('../DSSAT48') / filename
            
            if src.exists():
                dst = output_dir / filename
                shutil.copy2(src, dst)
                print(f"  [OK] Copied {filename}")
            else:
                print(f"  [WARNING] {filename} not found")
        
        # Copy input files from input folder
        for filename in input_files:
            src = Path('input') / filename
            if src.exists():
                dst = output_dir / filename
                shutil.copy2(src, dst)
                print(f"  [OK] Copied {filename}")
            else:
                print(f"  [WARNING] {filename} not found in input folder")
        
        # Copy observed data file (WHT format with grain weight and nitrogen data)
        wht_src = Path('input/orignal data/TUDU1501.WHT')
        if wht_src.exists():
            wht_dst = output_dir / 'TUDU1501.WHT'
            shutil.copy2(wht_src, wht_dst)
            print(f"  [OK] Copied TUDU1501.WHT (observed data: yield+grain wt+grain N)")
        else:
            print(f"  [WARNING] TUDU1501.WHT not found")
        
        # Copy Genotype directory
        src_genotype = Path('Genotype')
        dst_genotype = output_dir / 'Genotype'
        if src_genotype.exists():
            if dst_genotype.exists():
                shutil.rmtree(dst_genotype)
            shutil.copytree(src_genotype, dst_genotype)
            print(f"  [OK] Copied Genotype directory (N-Wheat cultivar parameters)")
        
        # Run DSSAT from output directory
        print("\nRunning DSSAT N-Wheat simulation...")
        original_dir = os.getcwd()
        try:
            os.chdir('output')
            result = subprocess.run(['DSCSM048.EXE', 'A', 'TUDU1501.WHX'], 
                                  capture_output=True, text=True, timeout=300)
            os.chdir(original_dir)
            
            execution_time = time.time() - start_time
            
            if result.returncode == 0:
                # Check if key output files were created
                key_outputs = ['Summary.OUT', 'OVERVIEW.OUT', 'PlantGro.OUT']
                outputs_created = all((output_dir / f).exists() for f in key_outputs)
                
                if outputs_created:
                    print(f"[SUCCESS] DSSAT N-Wheat simulation completed ({execution_time:.2f}s)")
                    print(f"  Output files saved in: output/")
                    self.log_step("DSSAT Simulation", "SUCCESS", "Simulation completed", execution_time)
                    return True
                else:
                    print(f"[WARNING] Simulation ran but some output files missing")
                    self.log_step("DSSAT Simulation", "WARNING", "Some outputs missing", execution_time)
                    return False
            else:
                print(f"[WARNING] DSSAT returned code {result.returncode}")
                self.log_step("DSSAT Simulation", "WARNING", f"Return code {result.returncode}", execution_time)
                return False
                
        except Exception as e:
            os.chdir(original_dir)
            print(f"[ERROR] Simulation failed: {e}")
            self.log_step("DSSAT Simulation", "FAILED", str(e))
            return False
    
    def run_visualization(self):
        """Run visualization generation"""
        
        self.print_header("STEP 3: VISUALIZATION GENERATION", 1)
        
        # Change to output directory for visualizations
        original_dir = os.getcwd()
        os.chdir('output')
        
        script = '../scripts/create_duernast_visualizations.py'
        description = 'Comprehensive 16-Panel Visualization'
        expected_output = 'duernast_2015_comprehensive_analysis.png'
        
        if not Path(script).exists():
            print(f"[ERROR] {description} - script not found")
            os.chdir(original_dir)
            return False
        
        self.print_header(description, 2)
        
        start_time = time.time()
        
        try:
            result = subprocess.run([sys.executable, script], 
                                  capture_output=True, text=True, timeout=180)
            execution_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"[SUCCESS] {description} completed ({execution_time:.2f}s)")
                
                # Check outputs
                if Path(expected_output).exists():
                    size = Path(expected_output).stat().st_size
                    print(f"  Generated: {expected_output} ({size:,} bytes)")
                    
                    pdf_version = expected_output.replace('.png', '.pdf')
                    if Path(pdf_version).exists():
                        pdf_size = Path(pdf_version).stat().st_size
                        print(f"  Generated: {pdf_version} ({pdf_size:,} bytes)")
                
                self.log_step(description, "SUCCESS", f"Generated {expected_output}", execution_time)
                os.chdir(original_dir)
                return True
            else:
                print(f"[ERROR] Visualization returned code {result.returncode}")
                if result.stderr:
                    print(f"  Error: {result.stderr[:500]}")
                self.log_step(description, "FAILED", "Non-zero exit", execution_time)
                os.chdir(original_dir)
                return False
                
        except subprocess.TimeoutExpired:
            print(f"[ERROR] Visualization timed out")
            self.log_step(description, "FAILED", "Timeout")
            os.chdir(original_dir)
            return False
        except Exception as e:
            print(f"[ERROR] Could not run {description}: {e}")
            self.log_step(description, "FAILED", str(e))
            os.chdir(original_dir)
            return False
    
    def generate_summary(self):
        """Generate workflow summary"""
        
        self.print_header("WORKFLOW SUMMARY", 1)
        
        # Collect generated outputs
        output_files = {
            'Visualization Files': [
                'output/duernast_2015_comprehensive_analysis.png',
                'output/duernast_2015_comprehensive_analysis.pdf'
            ],
            'DSSAT Output Files': [
                'output/Summary.OUT', 'output/OVERVIEW.OUT', 'output/PlantGro.OUT', 'output/PlantN.OUT',
                'output/SoilWat.OUT', 'output/SoilNi.OUT', 'output/Weather.OUT'
            ]
        }
        
        print("Generated Output Files:")
        print("=" * 70)
        
        total_files = 0
        total_size = 0
        
        for category, files in output_files.items():
            print(f"\n{category}:")
            print("-" * len(category))
            
            for filename in files:
                if Path(filename).exists():
                    size = Path(filename).stat().st_size
                    total_files += 1
                    total_size += size
                    print(f"  [OK] {filename:<50} ({size:>10,} bytes)")
        
        # Performance summary
        print(f"\n\nWorkflow Performance:")
        print("=" * 40)
        
        workflow_duration = (datetime.now() - self.start_time).total_seconds()
        successful_steps = len([s for s in self.workflow_steps if s['status'] == 'SUCCESS'])
        total_steps = len(self.workflow_steps)
        
        print(f"  Experiment: Duernast 2015 Spring Wheat")
        print(f"  Model: N-Wheat (WHAPS048)")
        print(f"  Treatments: 15 (various N levels and types)")
        print(f"  Total Steps: {total_steps}")
        print(f"  Successful: {successful_steps}")
        print(f"  Success Rate: {(successful_steps/total_steps)*100:.1f}%")
        print(f"  Workflow Time: {workflow_duration:.2f} seconds")
        print(f"  Files Generated: {total_files}")
        print(f"  Total Size: {total_size/1024/1024:.1f} MB")
        
        return True
    
    def run_complete_workflow(self):
        """Execute the complete workflow"""
        
        self.print_header("DUERNAST 2015 N-WHEAT ANALYSIS WORKFLOW", 1)
        print("Complete end-to-end analysis from DSSAT simulation to visualization")
        print(f"Experiment: Spring Wheat Nitrogen Response Trial (15 treatments)")
        print(f"Location: Dürnast, Freising, Bayern, Germany")
        print(f"Model: N-Wheat (WHAPS048)")
        print(f"Started: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Execute workflow steps
        workflow_steps = [
            (self.check_prerequisites, "Prerequisites Check"),
            (self.run_dssat_simulation, "DSSAT Simulation"),
            (self.run_visualization, "Visualization Generation"),
            (self.generate_summary, "Workflow Summary")
        ]
        
        failed = False
        for step_func, step_name in workflow_steps:
            if not step_func():
                self.print_header(f"WORKFLOW FAILED AT: {step_name}", 1)
                print(f"[ERROR] Step '{step_name}' failed")
                print(f"[INFO] Check error messages above")
                failed = True
                break
        
        if not failed:
            # Success summary
            self.print_header("WORKFLOW COMPLETED SUCCESSFULLY!", 1)
            
            end_time = datetime.now()
            total_duration = (end_time - self.start_time).total_seconds()
            
            print(f"Complete Duernast 2015 N-Wheat analysis workflow finished.")
            print(f"Total execution time: {total_duration:.2f} seconds")
            print(f"Analyzed 15 nitrogen treatments")
            print(f"Generated comprehensive visualization")
            
            print(f"\nOUTPUT FILES:")
            print(f"  - output/duernast_2015_comprehensive_analysis.png")
            print(f"  - output/duernast_2015_comprehensive_analysis.pdf")
            print(f"  - output/Summary.OUT (main results)")
            print(f"  - output/PlantGro.OUT (growth time series)")
            print(f"  - output/PlantN.OUT (nitrogen dynamics)")
            
            return True
        
        return False

def main():
    """Main entry point"""
    
    # Create workflow manager
    workflow = DuernastWorkflowManager()
    
    # Run complete workflow
    success = workflow.run_complete_workflow()
    
    return 0 if success else 1

if __name__ == "__main__":
    exit_code = main()
    
    print(f"\n{'='*90}")
    print(f"WORKFLOW EXIT CODE: {exit_code}")
    if exit_code == 0:
        print("STATUS: SUCCESS")
    else:
        print("STATUS: FAILED")
    print('='*90)
    
    sys.exit(exit_code)
